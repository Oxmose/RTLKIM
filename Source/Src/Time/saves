void update_tick(void)
{
    if(lapic_capable == 1)
    {
        update_lapic_tick();
    }
    else
    {
        update_pit_tick();
    }
}


uint32_t get_current_uptime(void)
{
    if(lapic_capable == 1)
    {
        return get_lapic_current_uptime();
    }
    else
    {
        return get_pit_current_uptime();
    }
}

uint32_t get_tick_count(void)
{
    if(lapic_capable == 1)
    {
        return get_lapic_tick_count();
    }
    else
    {
        return get_pit_tick_count();
    }
}

int32_t get_IRQ_SCHED_TIMER(void)
{
    if(lapic_capable == 1)
    {
        return LAPIC_TIMER_INTERRUPT_LINE;
    }
    else
    {
        return PIT_IRQ_LINE;
    }
}

int32_t get_line_SCHED_HW(void)
{
    if(lapic_capable == 1)
    {
        return LAPIC_TIMER_INTERRUPT_LINE;
    }
    else
    {
        return PIT_INTERRUPT_LINE;
    }
}


/**
 * @brief Updates the kernel time counter by one tick.
 * 
 * @details Updates the kernel time counter by one tick and computes the uptime 
 * in ms.
 */
void update_tick(void);

/**
 * @brief Returns the timer IRQ number attached to the scheduler.
 * 
 * @details Returns the timer IRQ number attached to the scheduler.
 *
 * @return The IRQ number of the timer that is attached to the scheduler.
 */
int32_t get_IRQ_SCHED_TIMER(void);

/**
 * @brief Returns the timer interrupt line attached to the scheduler.
 * 
 * @details Returns the timer interrupt line attached to the scheduler.
 *
 * @return The interrupt line of the timer that is attached to the scheduler.
 */
int32_t get_line_SCHED_HW(void);

/** 
 * @brief Returns the current uptime.
 * 
 * @details Return the current uptime of the system in seconds.
 *
 * @return The current uptime in seconds.
 */
uint32_t get_current_uptime(void);

/**
 * @brief Returns the number of system ticks since the system started.
 * 
 * @details Returns the number of system ticks since the system started.
 *
 * @returns The number of system ticks since the system started.
 */
uint32_t get_tick_count(void);
